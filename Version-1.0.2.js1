filename= C:\Users\Chethan\Downloads\origial11111\EverShop\node_modules\@evershop\evershop\src\modules\catalog\migration\Version-1.0.2.js
line=82-205 


C:\Users\Chethan\Downloads\original\EverShop\node_modules\@evershop\evershop\src\modules\catalog\migration\Version-1.0.0.js
407
426
445
C:\Users\Chethan\Downloads\original\EverShop\node_modules\@evershop\evershop\src\modules\catalog\services\category\createCategory.js
49

CREATE OR REPLACE PROCEDURE add_category_created_event(
    DATA_JSON VARIANT  -- JSON with key-value pairs for fields to insert into CATEGORY
)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
try {
    // Begin transaction.
    snowflake.execute({ sqlText: `BEGIN TRANSACTION` });
    
    const data = DATA_JSON;
    let columns = [];
    let values = [];
    
    for (const key in data) {
        columns.push(key);
        let val = data[key];
        if (typeof val === 'string') {
            // Escape single quotes.
            val = val.replace(/'/g, "''");
            values.push(`'${val}'`);
        } else if (typeof val === 'boolean') {
            values.push(val ? "TRUE" : "FALSE");
        } else if (val === null) {
            values.push("NULL");
        } else {
            values.push(val.toString());
        }
    }
    
    const insertSQL = `
        INSERT INTO CATEGORY (${columns.join(", ")})
        VALUES (${values.join(", ")})
    `;
    const stmtInsert = snowflake.createStatement({ sqlText: insertSQL });
    stmtInsert.execute();
    
    // Retrieve the newly inserted CATEGORY row.
    // Assumes no concurrent inserts; selects the row with the highest CATEGORY_ID.
    const selectSQL = `
        SELECT OBJECT_CONSTRUCT_KEEP_NULL(*) AS row_data
        FROM CATEGORY
        ORDER BY CATEGORY_ID DESC
        LIMIT 1
    `;
    const stmtSelect = snowflake.createStatement({ sqlText: selectSQL });
    const result = stmtSelect.execute();
    if (!result.next()) {
        throw new Error("No inserted category found.");
    }
    const insertedRow = result.getColumnValue("row_data");
    
    // Log an event in the EVENT table.
    // Convert the inserted row to a JSON string and escape single quotes.
    let eventDataStr = JSON.stringify(insertedRow).replace(/'/g, "''");
    const eventSQL = `
        INSERT INTO EVENT (NAME, DATA)
        SELECT 'category_created', PARSE_JSON('${eventDataStr}')
    `;
    const stmtEvent = snowflake.createStatement({ sqlText: eventSQL });
    stmtEvent.execute();
    
    // Commit the transaction.
    snowflake.execute({ sqlText: `COMMIT` });
    
    // Return the inserted row as a VARIANT.
    return insertedRow;
} catch (err) {
    // Rollback if any error occurs.
    snowflake.execute({ sqlText: `ROLLBACK` });
    throw new Error("Error: " + err);
}
$$;


CALL add_category_created_event(
  PARSE_JSON('{
    "CATEGORY_NAME": "New Category",
    "PARENT_ID": 0,
    "DESCRIPTION": "Category description goes here",
    "URL_KEY": ""
  }')
);



&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

C:\Users\Chethan\Downloads\original\EverShop\node_modules\@evershop\evershop\src\modules\catalog\services\category\updateCategory.js
50

CREATE OR REPLACE PROCEDURE add_category_updated_event(
    DATA_JSON VARIANT,   -- JSON with key-value pairs for fields to update in CATEGORY
    whereClause STRING   -- WHERE clause (e.g. "CATEGORY_ID = 101")
)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
try {
    // Begin transaction.
    snowflake.execute({ sqlText: `BEGIN TRANSACTION` });
    
    // 1. Validate the WHERE clause.
    if (!whereClause || whereClause.trim() === "") {
         throw new Error("WHERE clause is required for update.");
    }
    
    // 2. Build the dynamic UPDATE statement for the CATEGORY table.
    const data = DATA_JSON;
    let setClauses = [];
    for (const key in data) {
         let val = data[key];
         if (typeof val === "string") {
             val = val.replace(/'/g, "''");
             setClauses.push(`${key} = '${val}'`);
         } else if (typeof val === "boolean") {
             setClauses.push(`${key} = ${val ? "TRUE" : "FALSE"}`);
         } else if (val === null) {
             setClauses.push(`${key} = NULL`);
         } else {
             setClauses.push(`${key} = ${val}`);
         }
    }
    
    const updateSQL = `
         UPDATE CATEGORY
         SET ${setClauses.join(", ")}
         WHERE ${whereClause}
    `;
    const stmtUpdate = snowflake.createStatement({ sqlText: updateSQL });
    stmtUpdate.execute();
    
    // 3. Retrieve the updated CATEGORY row using OBJECT_CONSTRUCT_KEEP_NULL(*)
    const selectSQL = `
         SELECT OBJECT_CONSTRUCT_KEEP_NULL(*) AS row_data
         FROM CATEGORY
         WHERE ${whereClause}
         LIMIT 1
    `;
    const stmtSelect = snowflake.createStatement({ sqlText: selectSQL });
    const resultSelect = stmtSelect.execute();
    if (!resultSelect.next()) {
         throw new Error("No category found for update.");
    }
    const updatedRow = resultSelect.getColumnValue("row_data");
    
    // 4. Log an event in the EVENT table.
    // Convert the updated row to a JSON string and escape any single quotes.
    let eventDataStr = JSON.stringify(updatedRow).replace(/'/g, "''");
    const eventSQL = `
         INSERT INTO EVENT (NAME, DATA)
         SELECT 'category_updated', PARSE_JSON('${eventDataStr}')
    `;
    const stmtEvent = snowflake.createStatement({ sqlText: eventSQL });
    stmtEvent.execute();
    
    // Commit the transaction.
    snowflake.execute({ sqlText: `COMMIT` });
    
    // 5. Return the updated row as a VARIANT.
    return updatedRow;
    
} catch (err) {
    // Rollback if any error occurs.
    snowflake.execute({ sqlText: `ROLLBACK` });
    throw new Error("Error: " + err);
}
$$;

CALL add_category_updated_event(
    PARSE_JSON('{"STATUS": false, "POSITION": 2}'),
    'CATEGORY_ID = 101'
);



&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

C:\Users\Chethan\Downloads\original\EverShop\node_modules\@evershop\evershop\src\modules\catalog\services\category\deleteCategory.js
14

CREATE OR REPLACE PROCEDURE add_category_deleted_event(
    whereClause STRING  -- WHERE clause, e.g. "CATEGORY_ID = 101"
)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
try {
    // Begin transaction.
    snowflake.execute({ sqlText: `BEGIN TRANSACTION` });
    
    // Validate the WHERE clause.
    if (!whereClause || whereClause.trim() === "") {
        throw new Error("WHERE clause is required for deletion.");
    }
    
    // 2. Retrieve the category rows to be deleted using OBJECT_CONSTRUCT_KEEP_NULL(*)
    const selectSQL = `
        SELECT OBJECT_CONSTRUCT_KEEP_NULL(*) AS row_data
        FROM CATEGORY
        WHERE ${whereClause}
    `;
    const stmtSelect = snowflake.createStatement({ sqlText: selectSQL });
    const result = stmtSelect.execute();
    
    let rowsToDelete = [];
    while (result.next()) {
        const row = result.getColumnValue("row_data");
        rowsToDelete.push(row);
    }
    
    if (rowsToDelete.length === 0) {
        throw new Error("No category found for the given WHERE clause.");
    }
    
    // 3. Log the deletion event in the EVENT table.
    let eventDataStr = JSON.stringify(rowsToDelete).replace(/'/g, "''");
    const eventSQL = `
        INSERT INTO EVENT (NAME, DATA)
        SELECT 'category_deleted', PARSE_JSON('${eventDataStr}')
    `;
    const stmtEvent = snowflake.createStatement({ sqlText: eventSQL });
    stmtEvent.execute();
    
    // 4. Delete the rows from the CATEGORY table.
    const deleteSQL = `
        DELETE FROM CATEGORY
        WHERE ${whereClause}
    `;
    const stmtDelete = snowflake.createStatement({ sqlText: deleteSQL });
    stmtDelete.execute();
    
    // Commit the transaction.
    snowflake.execute({ sqlText: `COMMIT` });
    
    // 5. Return the details of the deleted rows as a VARIANT.
    return rowsToDelete;
    
} catch (err) {
    // Rollback if any error occurs.
    snowflake.execute({ sqlText: `ROLLBACK` });
    throw new Error("Error: " + err);
}
$$;

CALL add_category_deleted_event('CATEGORY_ID = 101');


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

C:\Users\Chethan\Downloads\original\EverShop\node_modules\@evershop\evershop\src\modules\catalog\migration\Version-1.0.4.js
46
81
116
151
C:\Users\Chethan\Downloads\original\EverShop\node_modules\@evershop\evershop\src\modules\catalog\services\product\createProduct.js
164


CREATE OR REPLACE PROCEDURE add_product_created_event(
    DATA_JSON VARIANT  -- JSON with key-value pairs for fields to insert into PRODUCT
)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
try {
    // Begin transaction.
    snowflake.execute({ sqlText: `BEGIN TRANSACTION` });
    
    const data = DATA_JSON;
    let columns = [];
    let values = [];
    
    for (const key in data) {
        columns.push(key);
        let val = data[key];
        if (typeof val === "string") {
            // Escape single quotes.
            val = val.replace(/'/g, "''");
            values.push(`'${val}'`);
        } else if (typeof val === "boolean") {
            values.push(val ? "TRUE" : "FALSE");
        } else if (val === null) {
            values.push("NULL");
        } else {
            values.push(val.toString());
        }
    }
    
    const insertSQL = `
        INSERT INTO PRODUCT (${columns.join(", ")})
        VALUES (${values.join(", ")})
    `;
    const stmtInsert = snowflake.createStatement({ sqlText: insertSQL });
    stmtInsert.execute();
    
    // Retrieve the newly inserted product row.
    // (Assumes no concurrent inserts; selects the row with the highest PRODUCT_ID)
    const selectSQL = `
        SELECT OBJECT_CONSTRUCT_KEEP_NULL(*) AS row_data
        FROM PRODUCT
        ORDER BY PRODUCT_ID DESC
        LIMIT 1
    `;
    const stmtSelect = snowflake.createStatement({ sqlText: selectSQL });
    const resultSelect = stmtSelect.execute();
    if (!resultSelect.next()) {
        throw new Error("No inserted product found.");
    }
    const insertedRow = resultSelect.getColumnValue("row_data");
    
    // Log an event in the EVENT table.
    // Convert the inserted row to a JSON string and escape single quotes.
    let eventDataStr = JSON.stringify(insertedRow).replace(/'/g, "''");
    const eventSQL = `
        INSERT INTO EVENT (NAME, DATA)
        SELECT 'product_created', PARSE_JSON('${eventDataStr}')
    `;
    const stmtEvent = snowflake.createStatement({ sqlText: eventSQL });
    stmtEvent.execute();
    
    // Commit the transaction.
    snowflake.execute({ sqlText: `COMMIT` });
    
    // Return the inserted product row as a VARIANT.
    return insertedRow;
} catch (err) {
    // Rollback if any error occurs.
    snowflake.execute({ sqlText: `ROLLBACK` });
    throw new Error("Error: " + err);
}
$$;

CALL add_product_created_event(
    PARSE_JSON('{
        "SKU": "SKU-XYZ-001",
        "PRICE": 99.99,
        "STATUS": true,
        "GROUP_ID": 2,
        "VARIANT_GROUP_ID": 5,
        "TYPE": "simple"
    }')
);

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

C:\Users\Chethan\Downloads\original\EverShop\node_modules\@evershop\evershop\src\modules\catalog\api\addVariantItem\[bodyParser]addItem.js
61
C:\Users\Chethan\Downloads\original\EverShop\node_modules\@evershop\evershop\src\modules\catalog\api\unlinkVariant\unlinkVariants.js
14
C:\Users\Chethan\Downloads\original\EverShop\node_modules\@evershop\evershop\src\modules\catalog\services\product\updateProduct.js
279
311



CREATE OR REPLACE PROCEDURE add_product_updated_event(
    DATA_JSON VARIANT,   -- JSON with fields to update (e.g., {"PRICE": 150.00, "STATUS": true})
    whereClause STRING   -- WHERE clause (e.g., "PRODUCT_ID = 702")
)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
try {
    // Begin transaction.
    snowflake.execute({ sqlText: `BEGIN TRANSACTION` });
    
    // Validate the WHERE clause.
    if (!whereClause || whereClause.trim() === "") {
        throw new Error("WHERE clause is required for update.");
    }
    
    // Build the dynamic UPDATE statement for the PRODUCT table.
    const data = DATA_JSON;
    let setClauses = [];
    for (const key in data) {
        let val = data[key];
        if (typeof val === "string") {
            val = val.replace(/'/g, "''");
            setClauses.push(`${key} = '${val}'`);
        } else if (typeof val === "boolean") {
            setClauses.push(`${key} = ${val ? "TRUE" : "FALSE"}`);
        } else if (val === null) {
            setClauses.push(`${key} = NULL`);
        } else {
            setClauses.push(`${key} = ${val}`);
        }
    }
    const updateSQL = `
         UPDATE PRODUCT
         SET ${setClauses.join(", ")}
         WHERE ${whereClause}
    `;
    const stmtUpdate = snowflake.createStatement({ sqlText: updateSQL });
    stmtUpdate.execute();
    
    // Retrieve the updated PRODUCT row using OBJECT_CONSTRUCT_KEEP_NULL(*)
    const selectSQL = `
         SELECT OBJECT_CONSTRUCT_KEEP_NULL(*) AS row_data
         FROM PRODUCT
         WHERE ${whereClause}
         LIMIT 1
    `;
    const stmtSelect = snowflake.createStatement({ sqlText: selectSQL });
    const resultSelect = stmtSelect.execute();
    if (!resultSelect.next()) {
         throw new Error("No product found for update.");
    }
    const updatedRow = resultSelect.getColumnValue("row_data");
    
    // Log an event in the EVENT table.
    let eventDataStr = JSON.stringify(updatedRow).replace(/'/g, "''");
    const eventSQL = `
         INSERT INTO EVENT (NAME, DATA)
         SELECT 'product_updated', PARSE_JSON('${eventDataStr}')
    `;
    const stmtEvent = snowflake.createStatement({ sqlText: eventSQL });
    stmtEvent.execute();
    
    // Commit the transaction.
    snowflake.execute({ sqlText: `COMMIT` });
    
    // Return the updated product row as a VARIANT.
    return updatedRow;
    
} catch (err) {
    // Rollback if any error occurs.
    snowflake.execute({ sqlText: `ROLLBACK` });
    throw new Error("Error: " + err);
}
$$;

CALL add_product_updated_event(
    PARSE_JSON('{"PRICE": 555555.00, "STATUS": false}'),
    'PRODUCT_ID = 702'
);


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

C:\Users\Chethan\Downloads\original\EverShop\node_modules\@evershop\evershop\src\modules\catalog\services\product\deleteProduct.js
13

CREATE OR REPLACE PROCEDURE add_product_deleted_event(
    whereClause STRING  -- WHERE clause, e.g. "PRODUCT_ID = 601"
)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
try {
    // Begin transaction.
    snowflake.execute({ sqlText: `BEGIN TRANSACTION` });
    
    // Validate the WHERE clause.
    if (!whereClause || whereClause.trim() === "") {
        throw new Error("WHERE clause is required for deletion.");
    }
    
    // 2. Retrieve the rows to be deleted from the PRODUCT table using OBJECT_CONSTRUCT_KEEP_NULL(*)
    const selectSQL = `
        SELECT OBJECT_CONSTRUCT_KEEP_NULL(*) AS row_data
        FROM PRODUCT
        WHERE ${whereClause}
    `;
    const stmtSelect = snowflake.createStatement({ sqlText: selectSQL });
    const result = stmtSelect.execute();
    
    let rowsToDelete = [];
    while (result.next()) {
        const row = result.getColumnValue("row_data");
        rowsToDelete.push(row);
    }
    
    if (rowsToDelete.length === 0) {
        throw new Error("No product found for deletion.");
    }
    
    // 3. Log an event in the EVENT table with the deleted rows data.
    let eventDataStr = JSON.stringify(rowsToDelete).replace(/'/g, "''");
    const eventSQL = `
        INSERT INTO EVENT (NAME, DATA)
        SELECT 'product_deleted', PARSE_JSON('${eventDataStr}')
    `;
    const stmtEvent = snowflake.createStatement({ sqlText: eventSQL });
    stmtEvent.execute();
    
    // 4. Delete the rows from the PRODUCT table.
    const deleteSQL = `
        DELETE FROM PRODUCT
        WHERE ${whereClause}
    `;
    const stmtDelete = snowflake.createStatement({ sqlText: deleteSQL });
    stmtDelete.execute();
    
    // Commit the transaction.
    snowflake.execute({ sqlText: `COMMIT` });
    
    // 5. Return details of the deleted rows as a VARIANT.
    return rowsToDelete;
    
} catch (err) {
    // Rollback if any error occurs.
    try {
        snowflake.execute({ sqlText: `ROLLBACK` });
    } catch (e) { }
    throw new Error("Error: " + err);
}
$$;


CALL add_product_deleted_event('PRODUCT_ID = 601');





